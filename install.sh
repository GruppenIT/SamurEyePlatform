#!/bin/bash

# SamurEye - Adversarial Exposure Validation Platform
# Script de Instala√ß√£o Autom√°tica para Ubuntu 20.04+
# Vers√£o: 1.0.0
#
# USAGE:
#   sudo ./install.sh                    # Instala√ß√£o padr√£o n√£o-interativa
#   sudo NONINTERACTIVE=false ./install.sh   # Instala√ß√£o interativa (deprecated)
#   sudo INSTALL_DIR=/custom/path ./install.sh # Diret√≥rio customizado
#
# VARIABLES:
#   INSTALL_DIR     - Diret√≥rio de instala√ß√£o (padr√£o: /opt/samureye)
#   SERVICE_USER    - Usu√°rio do servi√ßo (padr√£o: samureye)
#   SERVICE_GROUP   - Grupo do servi√ßo (padr√£o: samureye)
#   DB_NAME         - Nome do banco (padr√£o: samureye_db)
#   DB_USER         - Usu√°rio do banco (padr√£o: samureye)
#   REPO_URL        - URL do reposit√≥rio (padr√£o: https://github.com/GruppenIT/SamurEyePlatform.git)
#   NODE_VERSION    - Vers√£o Node.js (padr√£o: 20)
#   NONINTERACTIVE  - Modo n√£o-interativo (padr√£o: true)

set -Eeuo pipefail

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Vari√°veis de configura√ß√£o
INSTALL_DIR="${INSTALL_DIR:-/opt/samureye}"
SERVICE_USER="${SERVICE_USER:-samureye}"
SERVICE_GROUP="${SERVICE_GROUP:-samureye}"
SERVICE_NAME="${SERVICE_NAME:-samureye-api}"
DB_NAME="${DB_NAME:-samureye_db}"
DB_USER="${DB_USER:-samureye}"
REPO_URL="${REPO_URL:-https://github.com/GruppenIT/SamurEyePlatform.git}"
BRANCH="${BRANCH:-main}"
NODE_VERSION="${NODE_VERSION:-20}"
NONINTERACTIVE="${NONINTERACTIVE:-true}"

# Fun√ß√£o para logging
log() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

# Fun√ß√£o para verificar se o usu√°rio √© root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        error "Este script deve ser executado como root (use sudo)"
        exit 1
    fi
}

# Fun√ß√£o para detectar distribui√ß√£o
detect_distro() {
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        DISTRO=$ID
        VERSION=$VERSION_ID
    else
        error "N√£o foi poss√≠vel detectar a distribui√ß√£o do sistema"
        exit 1
    fi
    
    if [[ "$DISTRO" != "ubuntu" ]]; then
        error "Este script foi projetado para Ubuntu. Distribui√ß√£o detectada: $DISTRO"
        exit 1
    fi
    
    log "Distribui√ß√£o detectada: $DISTRO $VERSION"
}

# Fun√ß√£o para instalar depend√™ncias do sistema
install_system_deps() {
    log "Atualizando reposit√≥rios do sistema..."
    apt update && apt upgrade -y

    log "Instalando depend√™ncias b√°sicas do sistema..."
    apt install -y \
        curl \
        wget \
        git \
        unzip \
        build-essential \
        software-properties-common \
        apt-transport-https \
        ca-certificates \
        gnupg \
        lsb-release \
        ufw \
        htop \
        tree \
        jq \
        openssl \
        net-tools \
        python3

    log "Depend√™ncias b√°sicas instaladas com sucesso"
}

# Fun√ß√£o para instalar Node.js
install_nodejs() {
    log "Instalando Node.js $NODE_VERSION..."
    
    # Remove instala√ß√µes antigas do Node.js
    apt remove -y nodejs npm || true
    
    # Instala Node.js via NodeSource
    curl -fsSL https://deb.nodesource.com/setup_${NODE_VERSION}.x | bash -
    apt install -y nodejs
    
    # Verifica instala√ß√£o
    node_version=$(node --version)
    npm_version=$(npm --version)
    log "Node.js $node_version e npm $npm_version instalados com sucesso"
}

# Fun√ß√£o para instalar PostgreSQL
install_postgresql() {
    log "Instalando PostgreSQL..."
    
    # Instala PostgreSQL
    apt install -y postgresql postgresql-contrib postgresql-client
    
    # Inicia e habilita PostgreSQL
    systemctl start postgresql
    systemctl enable postgresql
    
    log "PostgreSQL instalado e iniciado com sucesso"
}

# Fun√ß√£o para configurar banco de dados (HARD RESET - sempre recria)
setup_database() {
    log "üîÑ HARD RESET: Recriando banco de dados PostgreSQL..."
    
    # ‚ö†Ô∏è HARD RESET: Remove completamente banco e usu√°rio existentes
    log "‚ò¢Ô∏è HARD RESET RADICAL: Removendo banco e usu√°rio com m√©todo direto..."
    
    # Para PostgreSQL temporariamente para limpeza total
    systemctl stop postgresql 2>/dev/null || true
    sleep 2
    systemctl start postgresql 2>/dev/null || true
    sleep 3
    
    # Termina conex√µes ativas primeiro
    sudo -u postgres psql -c "SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE usename = '$DB_USER' AND pid <> pg_backend_pid();" 2>/dev/null || true
    
    # Remove banco e usu√°rio (comandos separados - m√©todo correto)
    sudo -u postgres psql -c "DROP DATABASE IF EXISTS $DB_NAME;" 2>/dev/null || true
    sudo -u postgres psql -c "DROP ROLE IF EXISTS $DB_USER;" 2>/dev/null || true
    
    
    # Verifica√ß√£o final simples
    USER_CHECK=$(sudo -u postgres psql -tAc "SELECT 1 FROM pg_roles WHERE rolname='$DB_USER';" 2>/dev/null || echo "")
    if [[ -z "$USER_CHECK" ]]; then
        log "‚úÖ Usu√°rio $DB_USER removido com sucesso"
    else
        log "‚ö†Ô∏è Usu√°rio ainda existe, mas prosseguindo (ser√° recriado)"
    fi
    
    # Gera nova senha aleat√≥ria para o usu√°rio do banco
    DB_PASSWORD=$(openssl rand -base64 32)
    
    log "üë§ Criando novo usu√°rio do banco de dados..."
    # Cria role/usu√°rio com privil√©gios m√≠nimos necess√°rios
    sudo -u postgres psql -c "CREATE ROLE $DB_USER WITH LOGIN CREATEDB ENCRYPTED PASSWORD '$DB_PASSWORD';"
    
    log "üèóÔ∏è Criando novo banco de dados..."
    sudo -u postgres psql -c "CREATE DATABASE $DB_NAME OWNER $DB_USER;"
    
    # Remove privil√©gio CREATEDB ap√≥s cria√ß√£o do banco (least privilege) 
    log "üîí Removendo privil√©gio CREATEDB desnecess√°rio..."
    sudo -u postgres psql -c "ALTER ROLE $DB_USER NOCREATEDB;" 2>/dev/null || true
    
    # Instala extens√£o pgcrypto necess√°ria para gen_random_uuid()
    log "üîß Instalando extens√µes necess√°rias..."
    sudo -u postgres psql -d "$DB_NAME" -c "CREATE EXTENSION IF NOT EXISTS pgcrypto;" || true
    
    # Testa conex√£o e verifica estrutura final
    log "üîç Verificando estrutura final do banco..."
    if sudo -u postgres psql -d $DB_NAME -c "SELECT version();" > /dev/null 2>&1; then
        # Verifica se usu√°rio foi criado corretamente
        USER_FINAL_CHECK=$(sudo -u postgres psql -tAc "SELECT 1 FROM pg_roles WHERE rolname='$DB_USER' AND rolcanlogin=true;" 2>/dev/null || echo "")
        if [[ -z "$USER_FINAL_CHECK" ]]; then
            error "‚ùå Usu√°rio $DB_USER n√£o foi criado corretamente"
            exit 1
        fi
        
        # Verifica se banco foi criado corretamente  
        DB_FINAL_CHECK=$(sudo -u postgres psql -tAc "SELECT 1 FROM pg_database WHERE datname='$DB_NAME';" 2>/dev/null || echo "")
        if [[ -z "$DB_FINAL_CHECK" ]]; then
            error "‚ùå Banco $DB_NAME n√£o foi criado corretamente"
            exit 1
        fi
        
        log "‚úÖ HARD RESET conclu√≠do com sucesso"
        log "‚úÖ Banco de dados: $DB_NAME criado"
        log "‚úÖ Usu√°rio do banco: $DB_USER criado"
        log "üîë Nova senha do banco gerada"
        log "üîß Extens√£o pgcrypto instalada"
    else
        error "‚ùå Falha ao recriar o banco de dados"
        error "‚ùå N√£o foi poss√≠vel conectar ao banco $DB_NAME"
        exit 1
    fi
}

# Fun√ß√£o para instalar Nginx
install_nginx() {
    log "Instalando Nginx..."
    
    apt install -y nginx
    
    # Inicia e habilita Nginx
    systemctl start nginx
    systemctl enable nginx
    
    # Remove configura√ß√£o padr√£o
    rm -f /etc/nginx/sites-enabled/default
    
    log "Nginx instalado com sucesso"
}

# Fun√ß√£o para instalar ferramentas de seguran√ßa
install_security_tools() {
    log "Instalando ferramentas de seguran√ßa..."
    
    # Instala nmap
    apt install -y nmap
    
    # Instala nuclei via Go (mais seguro que download direto)
    if ! command -v nuclei &> /dev/null; then
        log "Instalando nuclei..."
        
        # Verifica se Go est√° dispon√≠vel ou instala
        if ! command -v go &> /dev/null; then
            # Tenta instalar via snap primeiro
            if command -v snap &> /dev/null; then
                snap install go --classic
            else
                # Fallback para apt se snap n√£o estiver dispon√≠vel
                log "Snapd n√£o dispon√≠vel, instalando Go via apt..."
                apt install -y golang-go
            fi
        fi
        
        # Verifica se Go foi instalado corretamente
        if ! command -v go &> /dev/null; then
            warn "N√£o foi poss√≠vel instalar Go. Nuclei ser√° ignorado."
            warn "Instale manualmente: https://github.com/projectdiscovery/nuclei"
        else
            # Instala nuclei via Go
            GOPATH="/tmp/go" go install -v github.com/projectdiscovery/nuclei/v2/cmd/nuclei@latest
            if [[ -f "/tmp/go/bin/nuclei" ]]; then
                mv /tmp/go/bin/nuclei /usr/local/bin/
                chmod +x /usr/local/bin/nuclei
                log "Nuclei instalado com sucesso"
                
                # Atualiza templates do nuclei
                nuclei -update-templates -silent
            else
                warn "Falha na instala√ß√£o do nuclei via Go"
            fi
            rm -rf /tmp/go
        fi
    fi
    
    # Instala smbclient e ferramentas LDAP
    apt install -y smbclient ldap-utils
    
    # Instala PowerShell Core (necess√°rio para AD Security via WinRM)
    log "Configurando PowerShell Core com suporte WSMan..."
    
    # Remove PowerShell via snap se existir (snap n√£o inclui WSMan)
    if snap list 2>/dev/null | grep -q powershell; then
        warn "Removendo PowerShell instalado via snap (sem suporte WSMan)..."
        snap remove powershell --purge || true
        rm -f /usr/bin/pwsh 2>/dev/null || true
    fi
    
    # Detecta vers√£o do Ubuntu
    UBUNTU_VERSION=$(lsb_release -rs)
    UBUNTU_CODENAME=$(lsb_release -cs)
    
    # Instala PowerShell via reposit√≥rio oficial da Microsoft (com WSMan)
    if ! command -v pwsh &> /dev/null; then
        log "Instalando PowerShell via reposit√≥rio Microsoft..."
        
        # Instala depend√™ncias necess√°rias para WSMan
        log "Instalando depend√™ncias WSMan..."
        apt install -y libssl-dev libpam0g-dev
        
        # Download e instala√ß√£o do pacote Microsoft
        wget -q "https://packages.microsoft.com/config/ubuntu/${UBUNTU_VERSION}/packages-microsoft-prod.deb" -O /tmp/packages-microsoft-prod.deb
        dpkg -i /tmp/packages-microsoft-prod.deb
        rm -f /tmp/packages-microsoft-prod.deb
        
        # Atualiza reposit√≥rios e instala PowerShell
        apt update
        apt install -y powershell
        
        # Verifica se PowerShell foi instalado corretamente
        if command -v pwsh &> /dev/null; then
            PWSH_VERSION=$(pwsh --version)
            log "‚úÖ PowerShell instalado com sucesso: $PWSH_VERSION"
            
            # Testa suporte WSMan
            log "Verificando suporte WSMan..."
            WSMAN_TEST=$(pwsh -NoProfile -Command "Get-Command New-PSSession -ErrorAction SilentlyContinue" 2>&1 || echo "FAIL")
            if [[ "$WSMAN_TEST" != "FAIL" ]]; then
                log "‚úÖ Suporte WSMan verificado com sucesso"
            else
                warn "‚ö†Ô∏è WSMan pode n√£o estar dispon√≠vel, mas prosseguindo..."
            fi
        else
            error "‚ùå Falha ao instalar PowerShell Core"
            error "‚ùå A jornada AD Security n√£o funcionar√° sem PowerShell"
            error "‚ùå Instale manualmente: https://learn.microsoft.com/powershell/scripting/install/install-ubuntu"
            exit 1
        fi
    else
        # PowerShell j√° instalado - verifica se √© via snap
        PWSH_PATH=$(which pwsh)
        if [[ "$PWSH_PATH" == *"/snap/"* ]]; then
            warn "PowerShell instalado via snap detectado - removendo para instalar vers√£o com WSMan..."
            snap remove powershell --purge || true
            rm -f /usr/bin/pwsh 2>/dev/null || true
            
            # Reinstala via reposit√≥rio Microsoft
            log "Instalando depend√™ncias WSMan..."
            apt install -y libssl-dev libpam0g-dev
            
            wget -q "https://packages.microsoft.com/config/ubuntu/${UBUNTU_VERSION}/packages-microsoft-prod.deb" -O /tmp/packages-microsoft-prod.deb
            dpkg -i /tmp/packages-microsoft-prod.deb
            rm -f /tmp/packages-microsoft-prod.deb
            
            apt update
            apt install -y powershell
            
            PWSH_VERSION=$(pwsh --version)
            log "‚úÖ PowerShell reinstalado com sucesso: $PWSH_VERSION"
        else
            PWSH_VERSION=$(pwsh --version)
            log "PowerShell j√° instalado (reposit√≥rio Microsoft): $PWSH_VERSION"
        fi
    fi
    
    log "Ferramentas de seguran√ßa instaladas com sucesso"
}

# Fun√ß√£o para criar usu√°rio do sistema
create_system_user() {
    log "Configurando usu√°rio do sistema..."
    
    # Criar grupo se n√£o existir
    if ! getent group "$SERVICE_GROUP" &>/dev/null; then
        log "Criando grupo $SERVICE_GROUP..."
        groupadd -r "$SERVICE_GROUP"
    fi
    
    # Criar usu√°rio se n√£o existir
    if ! id "$SERVICE_USER" &>/dev/null; then
        log "Criando usu√°rio $SERVICE_USER..."
        useradd -r -s /bin/false -d "$INSTALL_DIR" -g "$SERVICE_GROUP" "$SERVICE_USER"
    else
        log "Usu√°rio $SERVICE_USER j√° existe"
    fi
    
    # Criar diret√≥rio de instala√ß√£o
    mkdir -p "$INSTALL_DIR"
    chown -R "$SERVICE_USER:$SERVICE_GROUP" "$INSTALL_DIR"
}

# Fun√ß√£o para configurar firewall
setup_firewall() {
    log "Configurando firewall UFW..."
    
    # Detecta porta SSH atual com fallback para porta padr√£o
    SSH_PORT=$(ss -tlnp | grep sshd | awk '{print $4}' | cut -d: -f2 | head -1)
    if [[ -z "$SSH_PORT" ]]; then
        SSH_PORT="22"
        warn "N√£o foi poss√≠vel detectar porta SSH, usando padr√£o: 22"
    else
        log "Porta SSH detectada: $SSH_PORT"
    fi
    
    # Configurar de forma n√£o-interativa se NONINTERACTIVE=true
    if [[ "$NONINTERACTIVE" == "true" ]]; then
        log "Configurando firewall automaticamente (modo n√£o-interativo):"
        log "- SSH permitido na porta $SSH_PORT"
        log "- HTTP (80) e HTTPS (443) permitidos"  
        log "- Aplica√ß√£o (5000) bloqueada externamente"
    else
        # Confirma√ß√£o antes de habilitar firewall
        warn "O firewall ser√° configurado com as seguintes regras:"
        warn "- SSH permitido na porta $SSH_PORT"
        warn "- HTTP (80) e HTTPS (443) permitidos"
        warn "- Aplica√ß√£o (5000) bloqueada externamente"
        
        read -p "Continuar com configura√ß√£o do firewall? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            warn "Configura√ß√£o do firewall ignorada"
            return 0
        fi
    fi
    
    # Configura UFW
    ufw --force reset
    ufw default deny incoming
    ufw default allow outgoing
    ufw allow $SSH_PORT/tcp
    ufw allow 80/tcp
    ufw allow 443/tcp
    ufw deny 5000/tcp
    ufw --force enable
    
    log "Firewall configurado com sucesso"
}

# Fun√ß√£o para baixar e instalar aplica√ß√£o
install_application() {
    log "Baixando e instalando aplica√ß√£o SamurEye..."
    
    # Hard reset - remove diret√≥rio existente se houver
    if [[ -d "$INSTALL_DIR" ]]; then
        # Verifica√ß√µes de seguran√ßa antes do rm -rf
        if [[ -z "$INSTALL_DIR" || "$INSTALL_DIR" == "/" || "$INSTALL_DIR" == "/opt" ]]; then
            error "INSTALL_DIR inv√°lido ou perigoso: $INSTALL_DIR"
            exit 1
        fi
        
        # Verifica se √© um caminho seguro do SamurEye
        if [[ ! "$INSTALL_DIR" =~ ^/opt/samureye ]]; then
            error "INSTALL_DIR deve estar em /opt/samureye: $INSTALL_DIR"
            exit 1
        fi
        
        # Para o servi√ßo se estiver rodando
        log "Parando servi√ßos existentes..."
        systemctl stop ${SERVICE_NAME} || true
        systemctl disable ${SERVICE_NAME} || true
        
        # Preserva backups existentes se houverem
        local temp_backup_dir=""
        if [[ -d "$INSTALL_DIR/backups" ]]; then
            temp_backup_dir="/tmp/samureye_backups_$(date +%s)"
            log "Preservando backups existentes..."
            mv "$INSTALL_DIR/backups" "$temp_backup_dir" || true
        fi
        
        log "Removendo instala√ß√£o anterior..."
        rm -rf "$INSTALL_DIR"
    fi
    
    # Cria diret√≥rio de instala√ß√£o limpo
    mkdir -p "$INSTALL_DIR"
    cd "$INSTALL_DIR"
    
    # Clone limpo do reposit√≥rio sempre
    log "Clonando reposit√≥rio..."
    git clone -b "$BRANCH" "$REPO_URL" .
    
    # Restaura backups preservados se houverem
    if [[ -n "$temp_backup_dir" && -d "$temp_backup_dir" ]]; then
        log "Restaurando backups preservados..."
        rm -rf "$INSTALL_DIR/backups" 2>/dev/null || true
        mv "$temp_backup_dir" "$INSTALL_DIR/backups" || true
    fi
    
    # Instala depend√™ncias Node.js
    log "Instalando depend√™ncias da aplica√ß√£o..."
    npm install --production=false
    
    # Aplicar corre√ß√µes cr√≠ticas do WebSocket (PostgreSQL driver)
    log "Aplicando corre√ß√µes do driver de banco de dados..."
    npm uninstall @neondatabase/serverless || true
    npm install pg @types/pg
    npm dedupe && npm prune
    
    # Verificar se a corre√ß√£o foi aplicada
    if npm list pg > /dev/null 2>&1; then
        log "‚úÖ Driver PostgreSQL (pg) instalado com sucesso"
    else
        error "‚ùå Falha ao instalar driver PostgreSQL correto"
        exit 1
    fi
    
    # Compila aplica√ß√£o
    log "Compilando aplica√ß√£o..."
    npm run build
    
    # Verificar se build foi bem-sucedido
    if [[ -f "dist/index.js" ]]; then
        log "‚úÖ Build da aplica√ß√£o finalizado com sucesso"
        
        # Verificar se package.json cont√©m os scripts necess√°rios
        if grep -q '"start".*"node.*dist/index.js"' package.json; then
            log "‚úÖ Script de produ√ß√£o configurado corretamente"
        else
            warn "‚ö†Ô∏è  Script de produ√ß√£o pode n√£o estar configurado corretamente"
        fi
        
        # Verificar se as depend√™ncias corretas est√£o instaladas
        if [[ -d "node_modules/pg" ]]; then
            log "‚úÖ Driver PostgreSQL (pg) dispon√≠vel no node_modules"
        else
            error "‚ùå Driver PostgreSQL n√£o encontrado ap√≥s instala√ß√£o"
            exit 1
        fi
    else
        error "‚ùå Falha no build da aplica√ß√£o - arquivo dist/index.js n√£o foi criado"
        exit 1
    fi
    
    # Cria diret√≥rios necess√°rios
    mkdir -p logs backups temp
    
    # Define permiss√µes
    chown -R $SERVICE_USER:$SERVICE_GROUP $INSTALL_DIR
    chmod +x install.sh upgrade.sh
    
    log "Aplica√ß√£o instalada com sucesso"
}

# Fun√ß√£o para configurar vari√°veis de ambiente
setup_environment() {
    log "Configurando vari√°veis de ambiente..."
    
    # Gera chaves de criptografia
    ENCRYPTION_KEK=$(openssl rand -hex 32)
    SESSION_SECRET=$(openssl rand -base64 64 | tr -d '\n')
    
    # Cria arquivo .env
    cat > $INSTALL_DIR/.env << EOF
# Configura√ß√£o do Banco de Dados
DATABASE_URL=postgresql://$DB_USER:$(echo -n "$DB_PASSWORD" | python3 -c "import sys, urllib.parse; print(urllib.parse.quote(sys.stdin.read().strip(), safe=''))")@localhost:5432/$DB_NAME
PGHOST=localhost
PGPORT=5432
PGUSER=$DB_USER
PGPASSWORD=$DB_PASSWORD
PGDATABASE=$DB_NAME

# Configura√ß√£o da Aplica√ß√£o
NODE_ENV=production
PORT=5000

# Chave de Criptografia (CR√çTICO - Mantenha segura)
ENCRYPTION_KEK=$ENCRYPTION_KEK

# Configura√ß√£o de Sess√£o
SESSION_SECRET="$SESSION_SECRET"

# Configura√ß√£o de Logs
LOG_LEVEL=info

# Configura√ß√£o de Autentica√ß√£o OIDC (Configure conforme necess√°rio)
# ISSUER_URL=https://auth.replit.com
# CLIENT_ID=seu_client_id
# CLIENT_SECRET=seu_client_secret
# REDIRECT_URI=https://seu-dominio.com/auth/callback
EOF

    # Define permiss√µes seguras
    chown $SERVICE_USER:$SERVICE_GROUP $INSTALL_DIR/.env
    chmod 600 $INSTALL_DIR/.env
    
    log "Vari√°veis de ambiente configuradas"
}

# Fun√ß√£o para executar migra√ß√µes do banco
run_migrations() {
    log "Executando migra√ß√µes do banco de dados..."
    
    cd $INSTALL_DIR
    
    # Executa migra√ß√µes usando o arquivo .env diretamente (sem source)
    # O systemd e npm ler√£o o arquivo automaticamente
    sudo -u $SERVICE_USER \
        DATABASE_URL="postgresql://$DB_USER:$(echo -n "$DB_PASSWORD" | python3 -c "import sys, urllib.parse; print(urllib.parse.quote(sys.stdin.read().strip(), safe=''))")@localhost:5432/$DB_NAME" \
        npm run db:push
    
    log "Migra√ß√µes executadas com sucesso"
}

# Fun√ß√£o para criar usu√°rio administrador inicial (HARD RESET - sempre recria)
create_admin_user() {
    log "üîÑ HARD RESET: Criando novo usu√°rio administrador..."
    
    cd $INSTALL_DIR
    
    # Configura√ß√µes de email (pode ser personalizada via vari√°vel de ambiente)
    ADMIN_EMAIL="${ADMIN_EMAIL:-admin@samureye.com.br}"
    
    # Arquivo de credenciais (sempre recriado)
    CREDENTIALS_FILE="$INSTALL_DIR/ADMIN_CREDENTIALS"
    
    # ‚ö†Ô∏è HARD RESET: Remove qualquer usu√°rio administrador existente
    log "üóëÔ∏è Removendo usu√°rios administradores existentes..."
    PGPASSWORD="$DB_PASSWORD" psql -h localhost -U "$DB_USER" -d "$DB_NAME" \
        -c "DELETE FROM users WHERE role = 'global_administrator' OR email = '$ADMIN_EMAIL';" 2>/dev/null || true
    
    log "üÜï Criando novo usu√°rio administrador: $ADMIN_EMAIL"
    
    # Gera senha aleat√≥ria forte (apenas alfanum√©ricos para evitar problemas)
    ADMIN_TEMP_PASSWORD=$(openssl rand -base64 48 | tr -dc 'A-Za-z0-9' | head -c16)
    
    # Verifica se a senha foi gerada corretamente
    if [[ -z "$ADMIN_TEMP_PASSWORD" ]] || [[ ${#ADMIN_TEMP_PASSWORD} -lt 16 ]]; then
        error "Falha ao gerar senha tempor√°ria"
        exit 1
    fi
    
    log "Senha tempor√°ria gerada: ${#ADMIN_TEMP_PASSWORD} caracteres"
    
    # Verifica se bcryptjs est√° dispon√≠vel
    if ! node -e "require('bcryptjs')" 2>/dev/null; then
        error "Biblioteca bcryptjs n√£o encontrada. Execute: npm install"
        exit 1
    fi
    
    # Cria hash da senha usando Node.js com mesma biblioteca da aplica√ß√£o
    log "Gerando hash seguro da senha..."
    ADMIN_PASSWORD_HASH=$(node -e "
        const bcrypt = require('bcryptjs');
        const password = '$ADMIN_TEMP_PASSWORD';
        const hash = bcrypt.hashSync(password, 12);
        
        // Testa se o hash foi gerado corretamente
        const isValid = bcrypt.compareSync(password, hash);
        if (!isValid) {
            console.error('ERRO: Hash gerado n√£o confere com a senha!');
            process.exit(1);
        }
        
        console.log(hash);
    " 2>/dev/null)
    
    if [[ -z "$ADMIN_PASSWORD_HASH" ]]; then
        error "Falha ao gerar hash da senha"
        exit 1
    fi
    
    log "Hash gerado com ${#ADMIN_PASSWORD_HASH} caracteres"
    
    # Insere novo usu√°rio administrador (simples INSERT ap√≥s limpeza)
    log "üë§ Inserindo novo usu√°rio administrador no banco..."
    
    # Debug: mostra informa√ß√µes antes da inser√ß√£o
    log "üîç Email: $ADMIN_EMAIL"
    log "üîç Hash length: ${#ADMIN_PASSWORD_HASH}"
    
    INSERT_RESULT=$(PGPASSWORD="$DB_PASSWORD" psql -h localhost -U "$DB_USER" -d "$DB_NAME" -c "
        INSERT INTO users (email, password_hash, first_name, last_name, role, must_change_password)
        VALUES (\$\$${ADMIN_EMAIL}\$\$, \$\$${ADMIN_PASSWORD_HASH}\$\$, 'Administrador', 'SamurEye', 'global_administrator'::user_role, true)
        ON CONFLICT (email) DO UPDATE SET
            password_hash = EXCLUDED.password_hash,
            first_name = EXCLUDED.first_name,
            last_name = EXCLUDED.last_name,
            role = 'global_administrator'::user_role,
            must_change_password = true;
        " 2>&1)
    
    if [[ $? -ne 0 ]]; then
        error "Falha ao inserir usu√°rio administrador"
        error "Erro SQL: $INSERT_RESULT"
        
        # Debug adicional: verifica se tabela existe
        log "üîç Verificando estrutura da tabela users..."
        PGPASSWORD="$DB_PASSWORD" psql -h localhost -U "$DB_USER" -d "$DB_NAME" \
            -c "\d users" 2>&1 || true
        
        exit 1
    fi
    
    log "‚úÖ Usu√°rio administrador inserido no banco"
    
    # CR√çTICO: Busca o hash REAL do banco para valida√ß√£o
    log "üîç Verificando credenciais contra o banco de dados..."
    
    # Debug: verificar se usu√°rio foi realmente inserido
    USER_COUNT=$(PGPASSWORD="$DB_PASSWORD" psql -h localhost -U "$DB_USER" -d "$DB_NAME" \
        -t -A \
        -c "SELECT COUNT(*) FROM users WHERE email = \$\$${ADMIN_EMAIL}\$\$;" 2>&1)
    
    log "üîç DEBUG: Usu√°rios encontrados: $USER_COUNT"
    
    if [[ "$USER_COUNT" != "1" ]]; then
        error "PROBLEMA: Usu√°rio n√£o foi inserido corretamente (count: $USER_COUNT)"
        # Debug: mostrar todos os usu√°rios
        log "üîç DEBUG: Listando todos os usu√°rios:"
        PGPASSWORD="$DB_PASSWORD" psql -h localhost -U "$DB_USER" -d "$DB_NAME" \
            -c "SELECT email, role, created_at FROM users;" 2>&1 || true
        exit 1
    fi
    
    # Buscar hash usando dollar-quoted (mesma sintaxe do INSERT)
    STORED_HASH_RESULT=$(PGPASSWORD="$DB_PASSWORD" psql -h localhost -U "$DB_USER" -d "$DB_NAME" \
        -t -A \
        -c "SELECT password_hash FROM users WHERE email = \$\$${ADMIN_EMAIL}\$\$ LIMIT 1;" 2>&1)
    
    log "üîç DEBUG: Resultado da query hash: ${#STORED_HASH_RESULT} caracteres"
    
    # Extrair apenas o hash (remover espa√ßos/quebras)
    STORED_HASH=$(echo "$STORED_HASH_RESULT" | tr -d ' \n\r\t')
    
    log "üîç DEBUG: Hash limpo: ${#STORED_HASH} caracteres"
    
    if [[ -z "$STORED_HASH" ]] || [[ ${#STORED_HASH} -lt 50 ]]; then
        error "N√£o foi poss√≠vel recuperar hash v√°lido do usu√°rio do banco"
        error "Hash resultado: '$STORED_HASH_RESULT'"
        error "Hash limpo: '$STORED_HASH'"
        exit 1
    fi
    
    # Testa a senha contra o hash REAL armazenado no banco
    log "üß™ Validando senha contra hash do banco de dados..."
    
    log "üîç DEBUG: Senha para testar: '$ADMIN_TEMP_PASSWORD' (${#ADMIN_TEMP_PASSWORD} chars)"
    log "üîç DEBUG: Hash para testar: ${#STORED_HASH} chars (${STORED_HASH:0:10}...)"
    
    DB_TEST_RESULT=$(node -e "
        try {
            const bcrypt = require('bcryptjs');
            const password = '$ADMIN_TEMP_PASSWORD';
            const storedHash = '$STORED_HASH';
            
            console.log('Password:', password);
            console.log('Hash length:', storedHash.length);
            console.log('Hash start:', storedHash.substring(0, 10));
            
            const isValid = bcrypt.compareSync(password, storedHash);
            console.log(isValid ? 'SUCESSO' : 'ERRO');
        } catch (err) {
            console.log('ERRO_NODE:', err.message);
        }
    " 2>&1)
    
    log "üîç DEBUG: Resultado do teste bcrypt: $DB_TEST_RESULT"
    
    if [[ "$DB_TEST_RESULT" != *"SUCESSO"* ]]; then
        error "CR√çTICO: Senha n√£o confere com hash armazenado no banco!"
        error "Resultado do teste: $DB_TEST_RESULT"
        exit 1
    fi
    
    log "‚úÖ Valida√ß√£o contra banco de dados PASSOU"
    
    # Remove arquivo antigo se existir
    [[ -f "$CREDENTIALS_FILE" ]] && rm -f "$CREDENTIALS_FILE"
    
    # Cria novo arquivo com credenciais v√°lidas
    cat > "$CREDENTIALS_FILE" << EOF
===============================================
    CREDENCIAIS DO ADMINISTRADOR (HARD RESET)
===============================================

üìß Email: $ADMIN_EMAIL
üîë Senha tempor√°ria: $ADMIN_TEMP_PASSWORD

üö® IMPORTANTE: 
- Fa√ßa login imediatamente e altere a senha
- Remova este arquivo ap√≥s o primeiro login
- N√£o compartilhe essas credenciais

‚úÖ VERIFICADO: Credenciais testadas contra banco real
üîÑ HARD RESET: Nova senha gerada a cada instala√ß√£o  
üí° Gerado em: $(date '+%d/%m/%Y √†s %H:%M:%S')
===============================================
EOF
    
    # Define permiss√µes seguras
    chown $SERVICE_USER:$SERVICE_GROUP "$CREDENTIALS_FILE"
    chmod 600 "$CREDENTIALS_FILE"
    
    log "‚úÖ Usu√°rio administrador CRIADO com sucesso (HARD RESET)"
    log "üÜï Novo administrador configurado no sistema"
    log "üìß Email: $ADMIN_EMAIL"
    log "üìÑ Credenciais salvas em: $CREDENTIALS_FILE"
    log ""
    log "üö® IMPORTANTE: Leia o arquivo de credenciais e fa√ßa login imediatamente!"
    log ""
    log "üîí SEGURAN√áA: Execute 'rm $CREDENTIALS_FILE' ap√≥s primeiro login"
}

# Fun√ß√£o para configurar servi√ßos systemd
setup_systemd_services() {
    log "Configurando servi√ßos systemd..."
    
    # Servi√ßo principal da API (inclui toda a aplica√ß√£o) com graceful shutdown
    cat > /etc/systemd/system/${SERVICE_NAME}.service << EOF
[Unit]
Description=SamurEye API Server
After=network.target postgresql.service
Requires=postgresql.service

[Service]
Type=simple
User=$SERVICE_USER
Group=$SERVICE_GROUP
WorkingDirectory=$INSTALL_DIR
ExecStart=/usr/bin/npm run start
Restart=always
RestartSec=10

# Graceful shutdown configuration
KillSignal=SIGTERM
TimeoutStopSec=30
ExecStop=/bin/kill -s SIGTERM \$MAINPID

# Environment configuration
Environment=NODE_ENV=production
EnvironmentFile=$INSTALL_DIR/.env
StandardOutput=journal
StandardError=journal

# Security hardening
NoNewPrivileges=yes
ProtectSystem=strict
ProtectHome=yes
ReadWritePaths=$INSTALL_DIR/logs $INSTALL_DIR/backups $INSTALL_DIR/temp /tmp
PrivateTmp=yes
ProtectKernelTunables=yes
ProtectControlGroups=yes
RestrictRealtime=yes
SystemCallArchitectures=native

[Install]
WantedBy=multi-user.target
EOF

    # Recarrega systemd e habilita servi√ßos
    systemctl daemon-reload
    systemctl enable ${SERVICE_NAME}
    
    log "Servi√ßos systemd configurados"
}

# Fun√ß√£o para configurar Nginx reverse proxy
setup_nginx_proxy() {
    log "Configurando proxy reverso Nginx..."
    
    cat > /etc/nginx/sites-available/samureye << EOF
server {
    listen 80 default_server;
    server_name _;
    
    # Security Headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    
    # Proxy Settings
    location / {
        proxy_pass http://127.0.0.1:5000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_cache_bypass \$http_upgrade;
        
        # WebSocket Support
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_read_timeout 86400;
    }

    # Static files with caching
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)\$ {
        proxy_pass http://127.0.0.1:5000;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
    
    # Health check endpoint
    location /health {
        proxy_pass http://127.0.0.1:5000/api/health;
        access_log off;
    }
}
EOF

    # Ativa site
    ln -sf /etc/nginx/sites-available/samureye /etc/nginx/sites-enabled/
    
    # Testa configura√ß√£o
    nginx -t
    systemctl reload nginx
    
    log "Proxy reverso Nginx configurado"
}

# Fun√ß√£o para criar scripts de backup
setup_backup_scripts() {
    log "Criando scripts de backup..."
    
    mkdir -p $INSTALL_DIR/scripts
    
    cat > $INSTALL_DIR/scripts/backup.sh << 'EOF'
#!/bin/bash
# SamurEye Backup Script

BACKUP_DIR="/opt/samureye/backups"
DATE=$(date +%Y%m%d_%H%M%S)
DB_BACKUP="$BACKUP_DIR/db_backup_$DATE.sql"
APP_BACKUP="$BACKUP_DIR/app_backup_$DATE.tar.gz"

# Carrega vari√°veis de ambiente
source /opt/samureye/.env

# Cria diret√≥rio de backup
mkdir -p "$BACKUP_DIR"

echo "Iniciando backup em $DATE..."

# Backup do banco de dados
echo "Fazendo backup do banco de dados..."
PGPASSWORD="$PGPASSWORD" pg_dump -h "$PGHOST" -U "$PGUSER" -d "$PGDATABASE" > "$DB_BACKUP"

if [[ $? -eq 0 ]]; then
    echo "Backup do banco conclu√≠do: $DB_BACKUP"
else
    echo "ERRO: Falha no backup do banco de dados"
    exit 1
fi

# Backup dos arquivos da aplica√ß√£o
echo "Fazendo backup dos arquivos da aplica√ß√£o..."
tar -czf "$APP_BACKUP" --exclude=node_modules --exclude=dist --exclude=backups --exclude=.git /opt/samureye

if [[ $? -eq 0 ]]; then
    echo "Backup da aplica√ß√£o conclu√≠do: $APP_BACKUP"
else
    echo "ERRO: Falha no backup da aplica√ß√£o"
    exit 1
fi

# Limpeza de backups antigos (mant√©m √∫ltimos 7 dias)
echo "Limpando backups antigos..."
find "$BACKUP_DIR" -name "*.sql" -mtime +7 -delete
find "$BACKUP_DIR" -name "*.tar.gz" -mtime +7 -delete

echo "Backup conclu√≠do com sucesso!"
echo "Banco: $DB_BACKUP"
echo "Aplica√ß√£o: $APP_BACKUP"
EOF

    chmod +x $INSTALL_DIR/scripts/backup.sh
    chown $SERVICE_USER:$SERVICE_GROUP $INSTALL_DIR/scripts/backup.sh
    
    # Adiciona backup ao cron (di√°rio √†s 2h da manh√£)
    (crontab -l 2>/dev/null; echo "0 2 * * * $INSTALL_DIR/scripts/backup.sh") | crontab -
    
    log "Scripts de backup configurados"
}

# Fun√ß√£o para iniciar servi√ßos
start_services() {
    log "Iniciando servi√ßos..."
    
    # Inicia servi√ßos PostgreSQL e Nginx primeiro
    systemctl start postgresql nginx
    
    # Inicia servi√ßos SamurEye
    systemctl start ${SERVICE_NAME}
    
    # Verifica status dos servi√ßos
    sleep 5
    local services_ok=true
    
    for service in "${SERVICE_NAME}" "postgresql" "nginx"; do
        if systemctl is-active --quiet "$service"; then
            log "‚úì Servi√ßo $service iniciado com sucesso"
        else
            error "‚úó Falha ao iniciar servi√ßo $service"
            systemctl status "$service"
            journalctl -u "$service" --no-pager -n 20
            services_ok=false
        fi
    done
    
    if [[ "$services_ok" != "true" ]]; then
        error "Um ou mais servi√ßos falharam ao iniciar"
        exit 1
    fi
    
    # Testa aplica√ß√£o
    log "Testando resposta da aplica√ß√£o..."
    for i in {1..30}; do
        if curl -f http://localhost:5000/api/health &>/dev/null; then
            log "‚úì Aplica√ß√£o respondendo corretamente"
            break
        fi
        if [[ $i -eq 30 ]]; then
            error "‚úó Aplica√ß√£o n√£o est√° respondendo ap√≥s 30 tentativas"
            systemctl status ${SERVICE_NAME}
            journalctl -u ${SERVICE_NAME} --no-pager -n 50
            exit 1
        fi
        sleep 2
    done
    
    # Testa Nginx
    if curl -f http://localhost/ &>/dev/null; then
        log "‚úì Proxy reverso Nginx funcionando"
    else
        warn "‚ö† Nginx pode n√£o estar configurado corretamente"
    fi
}

# Fun√ß√£o para verificar se as corre√ß√µes do WebSocket funcionaram
verify_websocket_fix() {
    log "Verificando se as corre√ß√µes do WebSocket foram aplicadas..."
    
    # Aguarda o servi√ßo estabilizar
    sleep 10
    
    # Verifica se o servi√ßo est√° ativo
    if ! systemctl is-active --quiet ${SERVICE_NAME}; then
        error "‚ùå Servi√ßo ${SERVICE_NAME} n√£o est√° ativo"
        return 1
    fi
    
    # Verifica logs recentes por erros de WebSocket do NeonDB
    log "Verificando logs recentes por erros de WebSocket..."
    local websocket_errors=$(journalctl -u ${SERVICE_NAME} --since "5 minutes ago" --no-pager -q | grep -c "wss://localhost/v2\|connect ECONNREFUSED.*:443\|@neondatabase/serverless.*WebSocket" || echo "0")
    
    if [[ "$websocket_errors" -gt 0 ]]; then
        error "‚ùå Detectados $websocket_errors erro(s) de WebSocket nos logs recentes!"
        log "√öltimos erros encontrados:"
        journalctl -u ${SERVICE_NAME} --since "5 minutes ago" --no-pager -n 20 | grep -A5 -B5 "wss://localhost/v2\|connect ECONNREFUSED.*:443\|@neondatabase/serverless.*WebSocket"
        return 1
    fi
    
    # Verifica se aplica√ß√£o est√° rodando corretamente
    local startup_success=$(journalctl -u ${SERVICE_NAME} --since "5 minutes ago" --no-pager -q | grep -c "serving on port\|express.*serving" || echo "0")
    
    if [[ "$startup_success" -eq 0 ]]; then
        warn "‚ö†Ô∏è  N√£o foi encontrada mensagem de startup bem-sucedido nos logs recentes"
        log "Logs recentes do servi√ßo:"
        journalctl -u ${SERVICE_NAME} --since "5 minutes ago" --no-pager -n 20
    else
        log "‚úÖ Aplica√ß√£o iniciou corretamente (mensagens de startup encontradas)"
    fi
    
    # Teste final de sa√∫de da API
    local health_check_attempts=0
    local health_check_success=false
    
    while [[ $health_check_attempts -lt 10 ]]; do
        if curl -f -s http://localhost:5000/api/health &>/dev/null; then
            health_check_success=true
            break
        fi
        sleep 2
        ((health_check_attempts++))
    done
    
    if [[ "$health_check_success" == "true" ]]; then
        log "‚úÖ API Health check passou - aplica√ß√£o totalmente funcional"
    else
        error "‚ùå API Health check falhou - aplica√ß√£o pode ter problemas"
        return 1
    fi
    
    log "‚úÖ Verifica√ß√£o das corre√ß√µes de WebSocket PASSOU - problema resolvido!"
    return 0
}

# Fun√ß√£o para exibir informa√ß√µes finais
show_final_info() {
    local server_ip=$(curl -s http://ipv4.icanhazip.com/ 2>/dev/null || echo "IP_EXTERNO_NAO_DETECTADO")
    
    echo
    log "=========================================="
    log "    INSTALA√á√ÉO CONCLU√çDA COM SUCESSO!"
    log "=========================================="
    echo
    log "üåê Acesso √† aplica√ß√£o:"
    log "   Local: http://localhost"
    log "   Externo: http://$server_ip"
    echo
    log "üìä Status dos servi√ßos:"
    log "   SamurEye: $(systemctl is-active ${SERVICE_NAME})"
    log "   PostgreSQL: $(systemctl is-active postgresql)"
    log "   Nginx: $(systemctl is-active nginx)"
    echo
    log "üìÅ Diret√≥rios importantes:"
    log "   Aplica√ß√£o: $INSTALL_DIR"
    log "   Logs: $INSTALL_DIR/logs"
    log "   Backups: $INSTALL_DIR/backups"
    log "   Configura√ß√£o: $INSTALL_DIR/.env"
    echo
    log "üîß Comandos √∫teis:"
    log "   Status: systemctl status ${SERVICE_NAME}"
    log "   Logs: journalctl -u ${SERVICE_NAME} -f"
    log "   Restart: systemctl restart ${SERVICE_NAME}"
    log "   Backup: $INSTALL_DIR/scripts/backup.sh"
    log "   Upgrade: cd $INSTALL_DIR && ./upgrade.sh"
    echo
    log "üë§ Primeiro Acesso:"
    log "   1. Acesse a aplica√ß√£o no navegador"
    log "   2. Use o usu√°rio administrador padr√£o criado na instala√ß√£o"
    log "   3. IMPORTANTE: Altere a senha padr√£o no primeiro login"
    echo
    warn "‚ö†Ô∏è  A√á√ïES NECESS√ÅRIAS:"
    warn "1. Configure SSL/HTTPS para produ√ß√£o:"
    warn "   sudo apt install certbot python3-certbot-nginx"
    warn "   sudo certbot --nginx -d seu-dominio.com"
    echo
    warn "2. Configure autentica√ß√£o OIDC no arquivo:"
    warn "   $INSTALL_DIR/.env"
    echo
    warn "3. Revise configura√ß√µes de firewall:"
    warn "   sudo ufw status"
    echo
    log "üìñ Documenta√ß√£o completa: README.md"
    log "üÜò Suporte: https://github.com/GruppenIT/SamurEyePlatform/issues"
    echo
}

# Fun√ß√£o CR√çTICA para validar e corrigir credenciais PostgreSQL
validate_and_fix_credentials() {
    log "üîç CR√çTICO: Validando credenciais do PostgreSQL..."
    
    # Testa conex√£o atual usando credenciais do .env
    if ! PGPASSWORD="$DB_PASSWORD" psql -h localhost -U "$DB_USER" -d "$DB_NAME" -c "SELECT 1;" > /dev/null 2>&1; then
        error "‚ùå FALHA: Credenciais PostgreSQL inv√°lidas - regenerando..."
        
        # Para o servi√ßo se estiver rodando
        systemctl stop ${SERVICE_NAME} 2>/dev/null || true
        
        # Regenera senha do usu√°rio PostgreSQL
        NEW_DB_PASSWORD=$(openssl rand -base64 32)
        log "üîë Regenerando senha do usu√°rio PostgreSQL..."
        
        # Atualiza senha no PostgreSQL
        sudo -u postgres psql -c "ALTER USER $DB_USER WITH ENCRYPTED PASSWORD '$NEW_DB_PASSWORD';" || {
            error "Falha ao alterar senha do PostgreSQL"
            exit 1
        }
        
        # Atualiza vari√°vel local
        DB_PASSWORD="$NEW_DB_PASSWORD"
        
        # Regenera chaves de criptografia
        ENCRYPTION_KEK=$(openssl rand -hex 32)
        SESSION_SECRET=$(openssl rand -base64 64 | tr -d '\n')
        
        # Recria arquivo .env com credenciais corretas
        log "üìù Atualizando arquivo .env..."
        cat > $INSTALL_DIR/.env << EOF
# Configura√ß√£o do Banco de Dados (CORRIGIDO)
DATABASE_URL=postgresql://$DB_USER:$(echo -n "$DB_PASSWORD" | python3 -c "import sys, urllib.parse; print(urllib.parse.quote(sys.stdin.read().strip(), safe=''))")@localhost:5432/$DB_NAME
PGHOST=localhost
PGPORT=5432
PGUSER=$DB_USER
PGPASSWORD=$DB_PASSWORD
PGDATABASE=$DB_NAME

# Configura√ß√£o da Aplica√ß√£o
NODE_ENV=production
PORT=5000

# Chave de Criptografia (REGENERADA)
ENCRYPTION_KEK=$ENCRYPTION_KEK

# Configura√ß√£o de Sess√£o (REGENERADA)  
SESSION_SECRET="$SESSION_SECRET"

# Configura√ß√£o de Logs
LOG_LEVEL=info
EOF
        
        # Define permiss√µes seguras
        chown $SERVICE_USER:$SERVICE_GROUP $INSTALL_DIR/.env
        chmod 600 $INSTALL_DIR/.env
        
        # Testa nova conex√£o
        if ! PGPASSWORD="$DB_PASSWORD" psql -h localhost -U "$DB_USER" -d "$DB_NAME" -c "SELECT 1;" > /dev/null 2>&1; then
            error "‚ùå CR√çTICO: Credenciais ainda inv√°lidas ap√≥s corre√ß√£o!"
            exit 1
        fi
        
        log "‚úÖ Credenciais PostgreSQL corrigidas com sucesso"
        
        # For√ßa reload do systemd para ler novo .env
        log "üîÑ For√ßando reload do systemd para novas credenciais..."
        systemctl daemon-reload
        
    else
        log "‚úÖ Credenciais PostgreSQL v√°lidas"
    fi
    
    # Debug: mostra credenciais (sem senha) para verifica√ß√£o
    log "üîç Configura√ß√£o PostgreSQL:"
    log "   Host: localhost:5432"
    log "   Banco: $DB_NAME"
    log "   Usu√°rio: $DB_USER"
    log "   Senha: [OCULTA - ${#DB_PASSWORD} caracteres]"
    
    # Testa DATABASE_URL espec√≠ficamente
    TEST_URL="postgresql://$DB_USER:$(echo -n "$DB_PASSWORD" | python3 -c "import sys, urllib.parse; print(urllib.parse.quote(sys.stdin.read().strip(), safe=''))")@localhost:5432/$DB_NAME"
    
    # Teste final com timeout
    log "üß™ Teste final de conectividade..."
    if timeout 10 node -e "
        const { Pool } = require('pg');
        const pool = new Pool({ connectionString: '$TEST_URL' });
        pool.query('SELECT version()')
            .then((result) => { 
                console.log('‚úÖ DATABASE_URL OK - PostgreSQL conectado');
                process.exit(0); 
            })
            .catch(err => { 
                console.error('‚ùå DATABASE_URL ERRO:', err.message); 
                process.exit(1); 
            });
    "; then
        log "‚úÖ DATABASE_URL validado com sucesso"
    else
        error "‚ùå CR√çTICO: DATABASE_URL inv√°lido mesmo ap√≥s corre√ß√£o"
        error "Verifique manualmente: PGPASSWORD='$DB_PASSWORD' psql -h localhost -U '$DB_USER' -d '$DB_NAME'"
        exit 1
    fi
}

# Fun√ß√£o principal
main() {
    echo
    log "=========================================="
    log "  SamurEye - Instala√ß√£o Autom√°tica v1.0"
    log "=========================================="
    echo
    
    check_root
    detect_distro
    
    log "Iniciando instala√ß√£o em $(date)"
    
    # Executa etapas da instala√ß√£o
    install_system_deps
    install_nodejs
    install_postgresql
    setup_database
    install_nginx
    install_security_tools
    create_system_user
    setup_firewall
    install_application
    setup_environment
    run_migrations
    create_admin_user
    setup_systemd_services
    setup_nginx_proxy
    setup_backup_scripts
    
    # ‚ö†Ô∏è CR√çTICO: Valida e corrige credenciais antes de iniciar servi√ßos
    validate_and_fix_credentials
    
    start_services
    verify_websocket_fix
    
    show_final_info
    
    log "Instala√ß√£o conclu√≠da em $(date)"
}

# Captura erros e limpa arquivos tempor√°rios (sem mensagem duplicada)
trap 'rm -f /tmp/db_credentials; exit 1' ERR

# Executa instala√ß√£o
main "$@"